var assert = require('assert')
  , curry = require('curry')

  function x (a,b,c){
    return [a,b,c]
  }
  function y (a,b,c){
    return {self: this, args: [a,b,c]}
  }


function beF (x){
  assert.equal(typeof x,'function')
}
exports ['can curry a function'] = function (){
  var cx = curry([1],x)
  
  beF(cx)
  
  assert.deepEqual(cx(),[1,undefined,undefined])
  
  var xc = curry(x,[1])

  //if you don't pass in any args is does matter if it's left or right curried.
  beF(xc)
  
  assert.deepEqual(xc(),[1,undefined,undefined])

}

exports ['can curry a function, and args are in right place'] = function (){

  var cx = curry([1],x)

  beF(cx)

  assert.deepEqual(cx('X'),[1,'X',undefined])

  var xc = curry(x,[1])

  //if you don't pass in any args is does matter if it's left or right curried.
  beF(xc)

  assert.deepEqual(xc('X'),['X',1,undefined])

}


exports ['can curry a function, this passed in'] = function (){
  var s = {helo: 'asdfvnurowfn249r00jy4'}
  var ys = curry(y,s)
  var cys = curry([1],y,s)
 