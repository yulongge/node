var browserify = require('../');
var path = require('path');
var spawn = require('child_process').spawn;
var parseShell = require('shell-quote').parse;
var insertGlobals = require('insert-module-globals');
var duplexer = require('duplexer2');
var subarg = require('subarg');
var glob = require('glob');
var Readable = require('readable-stream').Readable;
var xtend = require('xtend');

module.exports = function (args, opts) {
    var argv = subarg(args, {
        'boolean': [
            'deps', 'pack', 'ig', 'dg', 'im', 'd', 'list', 'builtins',
            'commondir', 'bare', 'full-paths', 'bundle-external', 'bf',
            'node'
        ],
        string: [ 's', 'r', 'u', 'x', 't', 'i', 'o', 'e', 'c', 'it' ],
        alias: {
            ig: [ 'insert-globals', 'fast' ],
            dg: [ 'detect-globals', 'detectGlobals', 'dg' ],
            bf: [ 'browser-field', 'browserField' ],
            im: 'ignore-missing',
            it: 'ignore-transform',
            igv: 'insert-global-vars',
            d: 'debug',
            s: 'standalone',
            noParse: [ 'noparse' ],
            'full-paths': [ 'fullpaths', 'fullPaths' ],
            r: 'require',
            u: 'exclude',
            x: 'external',
            t: 'transform',
            i: 'ignore',
            o: 'outfile',
            e: 'entry',
            c: 'command',
            bare: 'bear'
        },
        'default': {
            ig: false,
            im: false,
            dg: true,
            d: false,
            builtins: true,
            commondir: true,
            'bundle-external': true,
            bf: true,
            node: false
        }
    });
    
    var entries = argv._.concat(argv.entry)
    .filter(Boolean).map(function (entry) {
        if (entry === '-') {
            var s = process.stdin;
            if (typeof s.read === 'function') return s;
            // only needed for 0.8, remove at some point later:
            var rs = Readable().wrap(s);
            s.resume();
            return rs;
        }
        return entry;
    });
    
    if (argv.node) {
        argv.bare = true;
        argv.browserField = false;
    }
    if (argv.bare) {
        argv.builtins = false;
        argv.commondir = false;
        argv.detectGlobals = false;
        if (argv.igv === undefined) {
            argv.igv = '__filename,__dirname';
        }
    }

    var ignoreTransform = argv['ignore-transform'] || argv.it;
    var b = browserify(xtend({
        noParse: Array.isArray(argv.noParse) ? argv.noParse : [argv.noParse],
        extensions: [].concat(argv.extension).filter(Boolean),
        ignoreTransform: [].concat(ignoreTransform).filter(Boolean),
        entries: entries,
        fullPaths: argv['full-paths'],
        builtins: argv.builtins === false ? false : undefined,
        commondir: argv.commondir === false ? false : undefined,
        bundleExternal: argv['bundle-external'],
        basedir: argv.basedir,
        browserField: argv.browserField,
        
        detectGlobals: argv.detectGlobals,
        insertGl