var Stream = require('stream');
var json = typeof JSON === 'object' ? JSON : require('jsonify');
var through = require('through');
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = function () {
    var output = through();
    output.pause();
    output.queue('TAP version 13\n');
    
    var results = new Results(output);
    output.push = function (t) { results.push(t) };
    
    output.only = function (name) {
        results.only = name;
    };
    
    nextTick(function next () {
        var t = results.tests.shift();
        if (!t && results.running) return;
        if (!t) return results.close();
        t.run();
    });
    
    return output;
};

function Results (stream) {
    this.count = 0;
    this.fail = 0;
    this.pass = 0;
    this.stream = stream;
    this.tests = [];
    this.running = 0;
}

Results.prototype.push = function (t, parentT) {
    var self = this;
    var write = function (s) { self.stream.queue(s) };
    t.once('prerun', function () {
        if (self.only && self.only !== t.name && !parentT) {
            var nt = self.tests.shift();
            if (nt) nt.run()
            else self.close();
            return;
        }
        
        self.running ++;
        write('# ' + t.name + '\n');
    });
    if (parentT) {
        var ix = self.tests.indexOf(parentT);
        if (ix >= 0) self.tests.splice(ix, 0, t);
    }
    else self.tests.push(t);
    
    var plan;
    t.on('plan', function (n) { plan = n });
    