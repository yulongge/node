#!/usr/bin/env node
var args = process.argv.slice(2)

var fs = require('fs')
if (!args.length && process.stdin.isTTY) {
  console.error(usage())
  process.exit(1)
}

process.stdout.on('error', function (er) {
  if (er.code === 'EPIPE')
    process.exit()
  else
    throw er
})

// defaults
var nodeArgs = []

var spawn = require('child_process').spawn
var fg = require('foreground-child')
var signalExit = require('signal-exit')
var opener = require('opener')

var timeout = process.env.TAP_TIMEOUT || 30
// coverage tools run slow.
if (global.__coverage__)
  timeout = 240

var color = require('supports-color')
if (process.env.TAP_COLORS !== undefined)
  color = !!(+process.env.TAP_COLORS)
var reporter
var files = []
var bail = false
var saveFile = null

var singleFlags = {
  b: 'bail',
  B: 'no-bail',
  c: 'color',
  C: 'no-color',
  h: 'help',
  '?': 'help',
  v: 'version'
}
var singleOpts = {
  R: 'reporter',
  t: 'timeout',
  s: 'save'
}

// If we're running under Travis-CI with a Coveralls.io token,
// then it's a safe bet that we ought to output coverage.
var coverage = !!process.env.COVERALLS_REPO_TOKEN

var coverageReport

var nycBin = require.resolve('nyc/bin/nyc.js')
var coverallsBin = require.resolve('coveralls/bin/coveralls.js')

for (var i = 0; i < args.length; i++) {
  var arg = args[i]
  if (arg.charAt(0) !== '-' || arg === '-') {
    files.push(arg)
    continue
  }

  // short-flags
  if (arg.charAt(1) !== '-' && arg !== '-gc') {
    var expand = []
    for (var f = 1; f < arg.length; f++) {
      var fc = arg.charAt(f)
      var sf = singleFlags[fc]
      var so = singleOpts[fc]
      if (sf)
        expand.push('--' + sf)
      else if (so) {
        var soval = arg.slice(f + 1)
        if (soval.charAt(0) !== '=')
          soval = '=' + soval
        expand.push('--' + so + soval)
        f = arg.length
      } else if (arg !== '-' + fc) {
        expand.push('-' + fc)
      }
    }
    if (expand.length) {
      args.splice.apply(args, [i, 1].concat(expand))
      i --
      continue
    }
  }

  var key = arg
  var val = null
  if (key.match(/^--/) && arg.indexOf('=') !== -1) {
    var kv = arg.split('=')
    key = kv.shift()
    val = kv.join('=')
  }

  switch (key) {
    case '--help':
      return console.log(usage())

    case '--version':
      return console.log(require('../package.json').version)

    case '--__coverage__':
      // NYC will not wrap a module in node_modules.
      // So, we need to tell the child proc when it's been added.
      global.__coverage__ = global.__coverage__ || {}
      continue

    case '--coverage-report':
      coverageReport = val || args[++i]
      if (!coverageReport) {
        if (!!process.env.COVERALLS_REPO_TOKEN)
          coverageReport = 'text-lcov'
        else
          coverageReport = 'text'
      }
      continue

    case '--no-cov': case '--no-coverage':
      coverage = false
      continue

    case '--cov': case '--coverage':
      coverage = true
      continue

    case '--save':
      val = val || args[++i]
      saveFile = val
      co