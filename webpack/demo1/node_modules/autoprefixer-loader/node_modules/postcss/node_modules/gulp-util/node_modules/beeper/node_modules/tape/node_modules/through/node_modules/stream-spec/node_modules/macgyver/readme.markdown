# macgyver

[![build status](https://secure.travis-ci.org/dominictarr/macgyver.png)](http://travis-ci.org/dominictarr/macgyver)
[![browser status](http://ci.testling.com/dominictarr/macgyver.png)](http://ci.testling.com/dominictarr/macgyver)
declarative assertion framework for invocation ordering.

when evented code really gets _mission critical_ there is one man you send in...

useful for testing streams, and other complex evented modules.

## example

``` js

var macgyver = require('macgyver')

//create a context
var mac = macgyver()

//wrap a function...

function hello () {
  console.log('hello')
}

function goodbye () {
  console.log('goodbye')
}

var hi = mac(hello)

//declare it's behaviours

hi.isCalled(1, 7) //must be called between 1 and 7 times.

var bye = mac(goodbye).once() //must be called strictly once.

hi.before(bye) //hi must be called strictly before bye is called

hi(); hi(); bye()

/*
  //this will produce an error!
  hi(); hi(); bye(); hi()
*/

mac.validate()
```

here is a real life example: [dominictarr/event-stream/test/spec.js](https://github.com/dominictarr/event-stream/blob/3f4f5cb57fb61144751ab5fe643b8974ab9007aa/test/spec.js#L14-56)

## API

create a `maggyver` context.

``` js
var macgyver = require('macgyver')
var mac = macgyver()

```

wrap a function 

``` js

function doSomething() {}

var _doSomething = mac(doSomething)

```

now, we can make declairations about how the wrapped function must be called.

### isCalled(min, max)
assert that the function is called at least `min` times, and at most `max` times.
if `min`, or `max` is null, then that bound is not checked. i.e. `mac(fun).isCalled(null, 10)`
will assert that `fun` is called not more than 10 times.

### once()
alias for `isCalled (1, 1)`

### times(n)
alias for `isCalled (n, n)`

### eventually()
alias for `isCalled (null, 1)`

### never()
alias for `isCalled (0, 0)`

### maybeOnce()
alias for `isCalled (null, 1)`

### atMost(max)
alias for `isCalled (null, max)`

### atLeast(min)
alias for `isCalled (min, null)`

### ag