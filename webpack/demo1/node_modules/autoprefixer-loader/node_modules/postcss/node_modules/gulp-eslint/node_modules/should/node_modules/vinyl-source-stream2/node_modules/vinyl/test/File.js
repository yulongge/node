var File = require('../');
var Stream = require('stream');
var fs = require('fs');

var should = require('should');
require('mocha');

describe('File', function() {

  describe('constructor()', function() {
    it('should default cwd to process.cwd', function(done) {
      var file = new File();
      file.cwd.should.equal(process.cwd());
      done();
    });

    it('should default base to cwd', function(done) {
      var cwd = "/";
      var file = new File({cwd: cwd});
      file.base.should.equal(cwd);
      done();
    });

    it('should default base to cwd even when none is given', function(done) {
      var file = new File();
      file.base.should.equal(process.cwd());
      done();
    });

    it('should default path to null', function(done) {
      var file = new File();
      should.not.exist(file.path);
      done();
    });

    it('should default stat to null', function(done) {
      var file = new File();
      should.not.exist(file.stat);
      done();
    });

    it('should default contents to null', function(done) {
      var file = new File();
      should.not.exist(file.contents);
      done();
    });

    it('should set base to given value', function(done) {
      var val = "/";
      var file = new File({base: val});
      file.base.should.equal(val);
      done();
    });

    it('should set cwd to given value', function(done) {
      var val = "/";
      var file = new File({cwd: val});
      file.cwd.should.equal(val);
      done();
    });

    it('should set path to given value', function(done) {
      var val = "/test.coffee";
      var file = new File({path: val});
      file.path.should.equal(val);
      done();
    });

    it('should set stat to given value', function(done) {
      var val = {};
      var file = new File({stat: val});
      file.stat.should.equal(val);
      done();
    });

    it('should set contents to given value', function(done) {
      var val = new Buffer("test");
      var file = new File({contents: val});
      file.contents.should.equal(val);
      done();
    });
  });
  
  describe('isBuffer()', function() {
    it('should return true when the contents are a Buffer', function(done) {
      var val = new Buffer("test");
      var file = new File({contents: val});
      file.isBuffer().should.equal(true);
      done();
    });

    it('should return false when the contents are a Stream', function(done) {
      var val = new Stream();
      var file = new File({contents: val});
      file.isBuffer().should.equal(false);
      done();
    });

    it('should return false when the contents are a null', function(done) {
      var file = new File({contents: null});
      file.isBuffer().should.equal(false);
      done();
    });
  });

  describe('isStream()', function() {
    it('should return false when the contents are a Buffer', function(done) {
      var val = new Buffer("test");
      var file = new File({contents: val});
      file.isStream().should.equal(false);
      done();
    });

    it('should return true when the contents are a Stream', function(done) {
      var val = new Stream();
      var file = new File({contents: val});
      file.isStream().should.equal(true);
      done();
    });

    it('should return false when the contents are a null', function(done) {
      var file = new File({contents: null});
      file.isStream().should.equal(false);
      done();
    });
  });

  describe('isNull()', function() {
    it('should return false when the contents are a Buffer', function(done) {
      var val = new Buffer("test");
      var file = new File({contents: val});
      file.isNull().should.equal(false);
      done();
    });

    it('should return false when the contents are a Stream', function(done) {
      var val = new Stream();
      var file = new File({contents: val});
      file.isNull().should.equal(false);
      done();
    });

    it('should return true when the contents are a null', function(done) {
      var file = new File({contents: null});
      file.isNull().should.equal(true);
      done();
    });
  });

  describe('isDirectory()', function() {
    var fakeStat = {
      isDirectory: function() {
        return true;
      }
    };

    it('should return false when the contents are a Buffer', function(done) {
      var val = new Buffer("test");
      var file = new File({contents: val, stat: fakeStat});
      file.isDirectory().should.equal(false);
      done();
    });

    it('should return false when the contents are a Stream', function(done) {
      var val = new Stream();
      var file = new File({contents: val, stat: fakeStat});
      file.isDirectory().should.equal(false);
      done();
    });

    it('should return true when the contents are a null', function(done) {
      var file = new File({contents: null, stat: fakeStat});
      file.isDirectory().should.equal(true);
      done();
    });
  });

  describe('clone()', function() {
    it('should copy all attributes over with Buffer', function(done) {
      var options = {
        cwd: "/",
        base: "/test/",
        path: "/test/test.coffee",
        contents: new Buffer("test")
      };
      var file = new File(options);
      var file2 = file.clone();

      file2.should.not.equal(file, 'refs should be different');
      file2.cwd.should.equal(file.cwd);
      file2.base.should.equal(file.base);
      file2.path.should.equal(file.path);
      file2.contents.should.not.equal(file.contents, 'buffer ref should be different');
      file2.contents.toString('utf8').should.equal(file.contents.toString('utf8'));
      done();
    });

    it('should copy all attribu