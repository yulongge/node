// imported from ncp (this is temporary, will rewrite)

var fs = require('graceful-fs')
var path = require('path')

function ncp (source, dest, options, callback) {
  var cback = callback

  if (!callback) {
    cback = options
    options = {}
  }

  var basePath = process.cwd()
  var currentPath = path.resolve(basePath, source)
  var targetPath = path.resolve(basePath, dest)

  var filter = options.filter
  var transform = options.transform
  var clobber = options.clobber !== false
  var dereference = options.dereference

  var errs = null

  var started = 0
  var finished = 0
  var running = 0
  // this is pretty useless now that we're using graceful-fs
  // consider removing
  var limit = options.limit || 512

  startCopy(currentPath)

  function startCopy (source) {
    started++
    if (filter) {
      if (filter instanceof RegExp) {
        if (!filter.test(source)) {
          return cb(true)
        }
      } else if (typeof filter === 'function') {
        if (!filter(source)) {
          return cb(true)
        }
      }
    }
    return getStats(source)
  }

  function getStats (source) {
    var defer = global.setImmediate || process.nextTick
    var stat = dereference ? fs.stat : fs.lstat
    if (running >= limit) {
      return defer(function () {
        getStats(source)
      })
    }
    running++
    stat(source, function (err, stats) {
      var item = {}
      if (err) {
        return onError(err)
      }

      // We need to get the mode from the stats object and preserve it.
      item.name = source
      item.mode = stats.mode
      item.mtime = stats.mtime // modified time
      item.atime = stats.atime // access time

      if (stats.isDirectory()) {
        return onDir(item)
      } else if (stats.isFile()) {
        return onFile(item)
      } else if (stats.isSymbolicLink()) {
        // Symlinks don't really need to know about the mode.
        return onLink(source)
      }
    })
  }

  function onFile (file) {
    var target = file.name.replace(currentPath, targetPath)
    isWrit