var traverser = require('../traverser')
  , assert = require('assert')

exports ['calls search function with properties object'] = function(){
  var obj = {}
  traverser(obj,function (props){//calls this function on every element.
    assert.deepEqual(props.path,[])
    assert.equal(props.value,obj)
    assert.equal(props.key,null)
    assert.ok('function' == typeof props.each)
  })
}


exports ['iterates over a list'] = function(){
  var list = [0,10,20,30,40,50,60,70,80,90,100]
    , leafCalled = false
    , leafCounter = 0
  traverser(list,{branch: branch, leaf: leaf})
  
  function leaf (props){
    assert.deepEqual(props.parent,list)
    assert.equal(props.key,'' + (leafCounter ++))
    assert.equal(props.value, list[props.key])
    assert.deepEqual(props.path, [props.key])
    assert.deepEqual(props.ancestors, [list])
    leafCalled = true;
  }

  function branch (props){//calls this function on every element.

    assert.deepEqual(props.path,[])
    assert.deepEqual(props.parent,null)
    assert.equal(props.key,null)
    assert.equal(props.value, list)
    assert.ok('function' == typeof props.each)

    props.each()

    assert.deepEqual(props.path,[])
    assert.deepEqual(props.parent,null)
    assert.equal(props.value, list)
    assert.equal(props.key,null)
    assert.ok('function' == typeof props.each)

  }
  assert.ok(leafCalled)
}
//*/

exports ['iterates over a tree'] = function (){

  var list = [0,10,20,[100,200],30,40,[1000,2000,[10000]],50,60,70,80,90,100]
    , leafCalled = false
    , leafCounter = 0
    , branchCounter = 0
  traverser(list,{branch: branch, leaf: leaf})

  function leaf(props){
    leafCounter ++
  }

  function branch(props){
    var _parent = props.parent
      , _path = [].concat(props.path)
      , _ancestors = [].concat(props.ancestors)
      , _key = props.key
      , _value = props.value
      
      props.each()
      branchCounter ++ 

      assert.equal(props.parent,_parent)
      assert.deepEqual(props.path,_path)
      assert.deepEqual(props.ancestors,_ancestors)
  