# -*- coding: utf-8 -*-
from __future__ import absolute_import, print_function, unicode_literals
import yaml
import yamlish
import test
import unittest

test_data_list = [
  {
    "name": 'Hello World',
    "in": [ '--- Hello, World', '...', ],
    "out": "Hello, World",
  },
  {
    "name": 'Hello World 2',
    "in": [ '--- \'Hello, \'\'World\'', '...', ],
    "out": "Hello, 'World",
  },
  {
    "name": 'Hello World 3',
    "in": [ '--- "Hello, World"', '...', ],
    "out": "Hello, World",
  },
  {
    "name": 'Hello World 4',
    "in": [ '--- "Hello, World"', '...', ],
    "out": "Hello, World",
  },
  {
    "name": 'Hello World 5',
    "in": [ '--- >', '      Hello,', '      World', '...', ],
    "out": "Hello, World\n",
  },
  {
    "name": 'Hello World 6',
    "in": [ '--- >', '   Hello,', ' World', '...', ],
    "error": yaml.parser.ParserError,
  },
  {
    "name": 'Simple array',
    "in": [ '---', '- 1', '- 2', '- 3', '...', ],
    "out": [ 1, 2, 3 ],
  },
  {
    "name": 'Mixed array',
    "in": [ '---', '- 1', "- 'two'", r'- "three\n"', '...', ],
    "out": [ 1, 'two', "three\n" ],
  },
  {
    "name": 'Hash in array',
    "in": [ '---', ' - 1', ' - two: 2', ' - 3', '...', ],
    "out": [ 1, { "two": 2 }, 3 ],
  },
  {
    "name": 'Hash in array 2',
    "in": [ '---', '- 1', '- two: 2', '  three: 3', '- 4', '...', ],
    "out": [ 1, { "two": 2, "three": 3 }, 4 ],
  },
  {
    "name": 'Nested array',
    "in": [
      '---',
      '- one',
      '- ',
      ' - two',
      ' - ',
      '  - three',
      ' - four',
      '- five',
      '...',
    ],
    "out": [ 'one', [ 'two', ['three'], 'four' ], 'five' ],
  },
  {
    "name": 'Nested hash',
    "in": [
      '---',
      'one:',
      '  five: 5',
      '  two:',
      '    four: 4',
      '    three: 3',
      'six: 6',
      '...',
    ],
    "out": {
      "one": { "two": { "three": 3, "four": 4 }, "five": 5 },
      "six": 6
    },
  },

  {
    "name": 'Original YAML::Tiny test',
    "in": [
      '---',
      'invoice: 34843',
      'date   : 2001-01-23',
      'bill-to:',
      '    given  : Chris',
      '    family : Dumars',
      '    address:',
      '        lines: | ',
      '            458 Walkman Dr.',
      '            Suite #292',
      '        city    : Royal Oak',
      '        state   : MI',
      '        postal  : 48046',
      'product:',
      '    - sku         : BL394D',
      '      quantity    : 4',
      '      description : Basketball',
      '      price       : 450.00',
      '    - sku         : BL4438H',
      '      quantity    : 1',
      '      description : Super Hoop',
      '      price       : 2392.00',
      'tax  : 251.42',
      'total: 4443.52',
      'comments: >',
      '    Late afternoon is best.',
      '    Backup contact is Nancy',
      '    Billsmer @ 338-4338',
      '...',
    ],
    "out": {
      "bill-to": {
        "given": 'Chris',
        "address": {
          "city": 'Royal Oak',
          "postal": 48046,
          "lines": "458 Walkman Dr.\nSuite #292\n",
          "state": 'MI'
        },
        "family": 'Dumars'
      },
      "invoice": 34843,
      "date": '2001-01-23',
      "tax": 251.42,
      "product": [
        {
          "sku": 'BL394D',
          "quantity": 4,
          "price": 450.00,
          "description": 'Basketball'
        },
        {
          "sku": 'BL4438H',
          "quantity": 1,
          "price": 2392.00,
          "description": 'Super Hoop'
        }
      ],
      'comments':
       "Late afternoon is best. Backup contact is Nancy Billsmer @ 338-4338\n",
      "total": 4443.52
    }
  },

  # Tests harvested from YAML::Tiny
  {
    "in": ['...'],
    "name": 'Regression: empty',
    "error": yaml.parser.ParserError,
  },
  {
    "in": [ '# comment', '...' ],
    "name": 'Regression: only_comment',
    "error": yaml.parser.ParserError,
  },
  {
    "skip": True, # A corner case, which is apparently not
    # clear even from the spec file
    "out": None,
    "in": [ '---', '...' ],
    "name": 'Regression: only_header',
    "x-error": yaml.parser.ParserError,
  },
  {
    "in": [ '---', '---', '...' ],
    "name": 'Regression: two_header',
    "error": yaml.composer.ComposerError,
  },
  {
    "out": None,
    "in": [ '--- ~', '...' ],
    "name": 'Regression: one_undef'
  },
  {
    "out": None,
    "in": [ '---  ~', '...' ],
    "name": 'Regression: one_undef2'
  },
  {
    "in": [ '--- ~', '---', '...' ],
    "name": 'Regression: two_undef',
    "error": yaml.composer.ComposerError,
  },
  {
    "out": 'foo',
    "in": [ '--- foo', '...' ],
    "name": 'Regression: one_scalar',
  },
  {
    "out": 'foo',
    "in": [ '---  foo', '...' ],
    "name": 'Regression: one_scalar2',
  },
  {
    "in": [ '--- foo', '--- bar', '...' ],
    "name": 'Regression: two_scalar',
    "error": yaml.composer.ComposerError,
  },
  {
    "out": ['foo'],
    "in": [ '---', '- foo', '...' ],
    "name": 'Regression: one_list1'
  },
  {
    "out": [ 'foo', 'bar' ],
    "in": [ '---', '- foo', '- bar', '...' ],
    "name": 'Regression: one_list2'
  },
  {
    "out": [ None, 'bar' ],
    "in": [ '---', '- ~', '- bar', '...' ],
    "name": 'Regression: one_listundef'
  },
  {
    "out": { 'foo': 'bar' },
    "in": [ '---', 'foo: bar', '...' ],
    "name": 'Regression: one_hash1'
  },
  {
    "out": {
      "foo": 'bar',
      "this": None
    },
    "in": [ '---', 'foo: bar', 'this: ~', '...' ],
    "name": 'Regression: one_hash2'
  },
  {
    "out": { 'foo': [ 'bar', None, 'baz' ] },
    "in": [ '---', 'foo:', '  - bar', '  - ~', '  - baz', '...' ],
    "name": 'Regression: arra